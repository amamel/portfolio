@mixin visually-hidden {
  opacity: 0;
  position: absolute;
  left: -99999px;
  top: -99999px;
}

/*-------------------------------------------
    Media Queries
-------------------------------------------*/

// http://css-tricks.com/conditional-media-query-mixins/
$MQs: true;

// Breakpoints

$screen-sm: 520px;
$screen-md: 730px;
$screen-lg: 1100px;
$screen-xl: 1400px;

// Container mixin for max width

@mixin contain($size) {
  margin: 0 auto;
  max-width: $size;
}


@mixin bp($point) {
    @if ($MQs) {
        $bp-sm: "(min-width: #{$screen-sm})";
        $bp-md: "(min-width: #{$screen-md})";
        $bp-lg: "(min-width: #{$screen-lg})";
        $bp-xl: "(min-width: #{$screen-xl})";

        @if $point == small {
            @media #{$bp-sm} { @content; }
        }
        @else if $point == med {
            @media #{$bp-md} { @content; }
        }
        @else if $point == large {
            @media #{$bp-lg} { @content; }
        }
        @else if $point == xl {
            @media #{$bp-xl} { @content; }
        }
    }
}

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Containers

$c-pad: 10%;

@mixin contain($size: md) {
  max-width: $screen-xl;
  width: 95%;
  margin: 0 auto;

  @include bp(md) {
    @if $size == sm {
      padding-left: $c-pad;
      padding-right: $c-pad;
    }
    @elseif $size == md {
      padding-left: $c-pad/2;
      padding-right: $c-pad/2;
    }
  }
}

.contain-sm {
  @include contain(sm);
}

.contain-md {
  @include contain(md);
}

.contain-lg {
  @include contain(lg);
}

.contain-xl {
  @include contain(xl);
}


// Clearfix
@mixin clearfix() {
  &:before,
  &:after {
      content: " "; // 1
      display: table; // 2
  }
  &:after {
      clear: both;
  }
  zoom: 1;
}

/* Transitions @include transition(all, 2s, ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
  -webkit-transition: $what $time $how;
  -moz-transition: $what $time $how;
  -ms-transition: $what $time $how;
  -o-transition: $what $time $how;
  transition: $what $time $how;
}


// Getting Sticky Headers and the WordPress Admin Bar to Behave
@mixin admin-sticky-fix( $offset: 0 ) {
  $narrow-offset: 46px;
  $wide-offset: 32px;
  @if $offset != 0 and type-of($offset) == 'number' {
    $narrow-offset: $narrow-offset + $offset;
    $wide-offset: $wide-offset + $offset;
  }
  .admin-bar & {
    top: $narrow-offset;
    @media screen and (min-width: 783px) {
      top: $wide-offset;
    }
  }
}


// Creates a wrapper for a series of columns
@mixin make-row($gutters: $grid-gutter-widths) {
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint in map-keys($gutters) {
    @include media-breakpoint-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      margin-right: ($gutter / -2);
      margin-left:  ($gutter / -2);
    }
  }
}

// Make the element grid-ready (applying everything but the width)
@mixin make-col-ready($gutters: $grid-gutter-widths) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing

  @each $breakpoint in map-keys($gutters) {
    @include media-breakpoint-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      padding-right: ($gutter / 2);
      padding-left:  ($gutter / 2);
    }
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  width: percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

// Get fancy by offsetting, or changing the sort order
@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}
